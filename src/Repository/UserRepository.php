<?php
namespace App\Repository;
use App\Connection\Connection;
use App\Connection\QueryBuilder;
use App\Entity\User;

final class UserRepository extends BaseRepository
{

    public function __construct(Connection $connection)
    {
        parent::__construct($connection, User::TABLE_NAME);
    }

    public function find(array $columns = array(), array $criteria = array())
    {
        foreach (parent::find($columns, $criteria) as $item){
            yield User::arrayToEntity($item, new User());
        }
    }

    public function insert($base): bool
    {
        $array = User::entityToArray($base);
        return parent::insert($array); // TODO: Change the autogenerated stub
    }

    public function update($base, array $criteria = array()): bool
    {
        $array = User::entityToArray($base);
        return parent::update($array, $criteria); // TODO: Change the autogenerated stub
    }

    protected function buildCriteria(array $criteria = array())
    {
        if(!empty($criteria))
        {
            foreach ($criteria as $sqlComand => $value){
                $command = strtolower($sqlComand);

                if(is_array($value))
                {
                    // if any value in MAPPER dosn't match then parameter is value not column name
                    $firstPram = User::getColumnFieldName($value[0]);

                    if(!is_array($value[1]))
                        $secondPram = User::getColumnFieldName($value[1]);

                    QueryBuilder::$command(
                        $firstPram ?? $value[0],
                        $secondPram ?? $value[1]);
                }
                else
                    QueryBuilder::$command($value);
            }
        }
    }

    public function fetchByNick(string $nick) : ?User{
        $statement = $this->connection->getConnection()->prepare(
            QueryBuilder::select($this->dbName)->where("nick = :nick")::getSQL()
        );

        $statement->bindValue(':nick', $nick, \PDO::PARAM_STR);
        $statement->execute();

        $result = $statement->fetch(\PDO::FETCH_ASSOC);
        $statement->closeCursor();

        return User::arrayToEntity($result, new User());
    }

    public function fetchByEmail(string $email) : ?User{
        $statement = $this->connection->getConnection()->prepare(
            QueryBuilder::select($this->dbName)->where("email = :email")::getSQL()
        );

        $statement->bindValue(':email', $email, \PDO::PARAM_STR);
        $statement->execute();

        $result = $statement->fetch(\PDO::FETCH_ASSOC);
        $statement->closeCursor();

        return User::arrayToEntity($result, new User());
    }

    public function fetchByLastLoginDate(){}

    public function fetchByCreateAccountDate(){}

    public function fetchByStatus(string $status){
        $statement = $this->connection->getConnection()->prepare(
            QueryBuilder::select($this->dbName)->where("account_status = :status")::getSQL()
        );

        $statement->bindValue(':status', $status, \PDO::PARAM_STR);
        $statement->execute();

        $result = $statement->fetchAll(\PDO::FETCH_ASSOC);
        $statement->closeCursor();

        foreach ($result as $item){
            yield User::arrayToEntity($item, new User());
        }
    }
}